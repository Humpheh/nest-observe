/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_any_pb = require('google-protobuf/google/protobuf/any_pb.js');
goog.object.extend(proto, google_protobuf_any_pb);
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.object.extend(proto, google_protobuf_timestamp_pb);
goog.exportSymbol('proto.nestlabs.gateway.v2.FieldMask', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.IfaceMeta', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.ObserveRequest', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.ObserveResponse', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.Patch', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.ResourceMeta', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.SchemaVersion', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitId', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitInstanceObserveParams', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitMeta', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitOperation', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitOperationList', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitState', null, global);
goog.exportSymbol('proto.nestlabs.gateway.v2.TraitTypeObserveParams', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.ObserveRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nestlabs.gateway.v2.ObserveRequest.repeatedFields_, null);
};
goog.inherits(proto.nestlabs.gateway.v2.ObserveRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.ObserveRequest.displayName = 'proto.nestlabs.gateway.v2.ObserveRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitInstanceObserveParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitInstanceObserveParams.displayName = 'proto.nestlabs.gateway.v2.TraitInstanceObserveParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitTypeObserveParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitTypeObserveParams.displayName = 'proto.nestlabs.gateway.v2.TraitTypeObserveParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.FieldMask = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nestlabs.gateway.v2.FieldMask.repeatedFields_, null);
};
goog.inherits(proto.nestlabs.gateway.v2.FieldMask, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.FieldMask.displayName = 'proto.nestlabs.gateway.v2.FieldMask';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.ObserveResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nestlabs.gateway.v2.ObserveResponse.repeatedFields_, null);
};
goog.inherits(proto.nestlabs.gateway.v2.ObserveResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.ObserveResponse.displayName = 'proto.nestlabs.gateway.v2.ObserveResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitOperationList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nestlabs.gateway.v2.TraitOperationList.repeatedFields_, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitOperationList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitOperationList.displayName = 'proto.nestlabs.gateway.v2.TraitOperationList';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitOperation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitOperation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitOperation.displayName = 'proto.nestlabs.gateway.v2.TraitOperation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.ResourceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nestlabs.gateway.v2.ResourceMeta.repeatedFields_, null);
};
goog.inherits(proto.nestlabs.gateway.v2.ResourceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.ResourceMeta.displayName = 'proto.nestlabs.gateway.v2.ResourceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitState.displayName = 'proto.nestlabs.gateway.v2.TraitState';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitMeta.displayName = 'proto.nestlabs.gateway.v2.TraitMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.TraitId = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.TraitId, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.TraitId.displayName = 'proto.nestlabs.gateway.v2.TraitId';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.IfaceMeta = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.IfaceMeta, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.IfaceMeta.displayName = 'proto.nestlabs.gateway.v2.IfaceMeta';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.Patch = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.Patch, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.Patch.displayName = 'proto.nestlabs.gateway.v2.Patch';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nestlabs.gateway.v2.SchemaVersion = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nestlabs.gateway.v2.SchemaVersion, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nestlabs.gateway.v2.SchemaVersion.displayName = 'proto.nestlabs.gateway.v2.SchemaVersion';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nestlabs.gateway.v2.ObserveRequest.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.ObserveRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.ObserveRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ObserveRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    stateTypesListList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f,
    traitTypeParamsList: jspb.Message.toObjectList(msg.getTraitTypeParamsList(),
    proto.nestlabs.gateway.v2.TraitTypeObserveParams.toObject, includeInstance),
    traitInstanceParamsList: jspb.Message.toObjectList(msg.getTraitInstanceParamsList(),
    proto.nestlabs.gateway.v2.TraitInstanceObserveParams.toObject, includeInstance),
    userId: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.ObserveRequest}
 */
proto.nestlabs.gateway.v2.ObserveRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.ObserveRequest;
  return proto.nestlabs.gateway.v2.ObserveRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.ObserveRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.ObserveRequest}
 */
proto.nestlabs.gateway.v2.ObserveRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedInt32());
      msg.setStateTypesListList(value);
      break;
    case 3:
      var value = new proto.nestlabs.gateway.v2.TraitTypeObserveParams;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitTypeObserveParams.deserializeBinaryFromReader);
      msg.addTraitTypeParams(value);
      break;
    case 4:
      var value = new proto.nestlabs.gateway.v2.TraitInstanceObserveParams;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitInstanceObserveParams.deserializeBinaryFromReader);
      msg.addTraitInstanceParams(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.ObserveRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.ObserveRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ObserveRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStateTypesListList();
  if (f.length > 0) {
    writer.writePackedInt32(
      1,
      f
    );
  }
  f = message.getTraitTypeParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nestlabs.gateway.v2.TraitTypeObserveParams.serializeBinaryToWriter
    );
  }
  f = message.getTraitInstanceParamsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.nestlabs.gateway.v2.TraitInstanceObserveParams.serializeBinaryToWriter
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * repeated int32 state_types_list = 1;
 * @return {!Array<number>}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.getStateTypesListList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<number>} value */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.setStateTypesListList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.addStateTypesList = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.clearStateTypesListList = function() {
  this.setStateTypesListList([]);
};


/**
 * repeated TraitTypeObserveParams trait_type_params = 3;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitTypeObserveParams>}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.getTraitTypeParamsList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitTypeObserveParams>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitTypeObserveParams, 3));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitTypeObserveParams>} value */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.setTraitTypeParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitTypeObserveParams=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitTypeObserveParams}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.addTraitTypeParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nestlabs.gateway.v2.TraitTypeObserveParams, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.clearTraitTypeParamsList = function() {
  this.setTraitTypeParamsList([]);
};


/**
 * repeated TraitInstanceObserveParams trait_instance_params = 4;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitInstanceObserveParams>}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.getTraitInstanceParamsList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitInstanceObserveParams>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitInstanceObserveParams, 4));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitInstanceObserveParams>} value */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.setTraitInstanceParamsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.addTraitInstanceParams = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.nestlabs.gateway.v2.TraitInstanceObserveParams, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.clearTraitInstanceParamsList = function() {
  this.setTraitInstanceParamsList([]);
};


/**
 * optional string user_id = 5;
 * @return {string}
 */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.ObserveRequest.prototype.setUserId = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitInstanceObserveParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitId: (f = msg.getTraitId()) && proto.nestlabs.gateway.v2.TraitId.toObject(includeInstance, f),
    monotonicVersionFiltersList: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitInstanceObserveParams;
  return proto.nestlabs.gateway.v2.TraitInstanceObserveParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nestlabs.gateway.v2.TraitId;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitId.deserializeBinaryFromReader);
      msg.setTraitId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonotonicVersionFiltersList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitInstanceObserveParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitInstanceObserveParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nestlabs.gateway.v2.TraitId.serializeBinaryToWriter
    );
  }
  f = message.getMonotonicVersionFiltersList();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
};


/**
 * optional TraitId trait_id = 1;
 * @return {?proto.nestlabs.gateway.v2.TraitId}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.getTraitId = function() {
  return /** @type{?proto.nestlabs.gateway.v2.TraitId} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.TraitId, 1));
};


/** @param {?proto.nestlabs.gateway.v2.TraitId|undefined} value */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.setTraitId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.clearTraitId = function() {
  this.setTraitId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.hasTraitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 monotonic_version_filters_list = 2;
 * @return {number}
 */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.getMonotonicVersionFiltersList = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.TraitInstanceObserveParams.prototype.setMonotonicVersionFiltersList = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitTypeObserveParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitTypeObserveParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitType: jspb.Message.getFieldWithDefault(msg, 1, ""),
    stateFieldMask: (f = msg.getStateFieldMask()) && proto.nestlabs.gateway.v2.FieldMask.toObject(includeInstance, f),
    observerSchemaVersion: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitTypeObserveParams}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitTypeObserveParams;
  return proto.nestlabs.gateway.v2.TraitTypeObserveParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitTypeObserveParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitTypeObserveParams}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraitType(value);
      break;
    case 2:
      var value = new proto.nestlabs.gateway.v2.FieldMask;
      reader.readMessage(value,proto.nestlabs.gateway.v2.FieldMask.deserializeBinaryFromReader);
      msg.setStateFieldMask(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setObserverSchemaVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitTypeObserveParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitTypeObserveParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStateFieldMask();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nestlabs.gateway.v2.FieldMask.serializeBinaryToWriter
    );
  }
  f = message.getObserverSchemaVersion();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional string trait_type = 1;
 * @return {string}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.getTraitType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.setTraitType = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional FieldMask state_field_mask = 2;
 * @return {?proto.nestlabs.gateway.v2.FieldMask}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.getStateFieldMask = function() {
  return /** @type{?proto.nestlabs.gateway.v2.FieldMask} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.FieldMask, 2));
};


/** @param {?proto.nestlabs.gateway.v2.FieldMask|undefined} value */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.setStateFieldMask = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.clearStateFieldMask = function() {
  this.setStateFieldMask(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.hasStateFieldMask = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional uint32 observer_schema_version = 3;
 * @return {number}
 */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.getObserverSchemaVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.TraitTypeObserveParams.prototype.setObserverSchemaVersion = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nestlabs.gateway.v2.FieldMask.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.FieldMask.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.FieldMask.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.FieldMask} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.FieldMask.toObject = function(includeInstance, msg) {
  var f, obj = {
    pathsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.FieldMask}
 */
proto.nestlabs.gateway.v2.FieldMask.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.FieldMask;
  return proto.nestlabs.gateway.v2.FieldMask.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.FieldMask} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.FieldMask}
 */
proto.nestlabs.gateway.v2.FieldMask.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addPaths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.FieldMask.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.FieldMask.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.FieldMask} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.FieldMask.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPathsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string paths = 1;
 * @return {!Array<string>}
 */
proto.nestlabs.gateway.v2.FieldMask.prototype.getPathsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.nestlabs.gateway.v2.FieldMask.prototype.setPathsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.nestlabs.gateway.v2.FieldMask.prototype.addPaths = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.FieldMask.prototype.clearPathsList = function() {
  this.setPathsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nestlabs.gateway.v2.ObserveResponse.repeatedFields_ = [1,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.ObserveResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.ObserveResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ObserveResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceMetasList: jspb.Message.toObjectList(msg.getResourceMetasList(),
    proto.nestlabs.gateway.v2.ResourceMeta.toObject, includeInstance),
    initialResourceMetasContinue: jspb.Message.getBooleanFieldWithDefault(msg, 2, false),
    traitStatesList: jspb.Message.toObjectList(msg.getTraitStatesList(),
    proto.nestlabs.gateway.v2.TraitState.toObject, includeInstance),
    traitOperationListsList: jspb.Message.toObjectList(msg.getTraitOperationListsList(),
    proto.nestlabs.gateway.v2.TraitOperationList.toObject, includeInstance),
    currentTime: (f = msg.getCurrentTime()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.ObserveResponse}
 */
proto.nestlabs.gateway.v2.ObserveResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.ObserveResponse;
  return proto.nestlabs.gateway.v2.ObserveResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.ObserveResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.ObserveResponse}
 */
proto.nestlabs.gateway.v2.ObserveResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nestlabs.gateway.v2.ResourceMeta;
      reader.readMessage(value,proto.nestlabs.gateway.v2.ResourceMeta.deserializeBinaryFromReader);
      msg.addResourceMetas(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInitialResourceMetasContinue(value);
      break;
    case 3:
      var value = new proto.nestlabs.gateway.v2.TraitState;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitState.deserializeBinaryFromReader);
      msg.addTraitStates(value);
      break;
    case 4:
      var value = new proto.nestlabs.gateway.v2.TraitOperationList;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitOperationList.deserializeBinaryFromReader);
      msg.addTraitOperationLists(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCurrentTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.ObserveResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.ObserveResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ObserveResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceMetasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nestlabs.gateway.v2.ResourceMeta.serializeBinaryToWriter
    );
  }
  f = message.getInitialResourceMetasContinue();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getTraitStatesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.nestlabs.gateway.v2.TraitState.serializeBinaryToWriter
    );
  }
  f = message.getTraitOperationListsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.nestlabs.gateway.v2.TraitOperationList.serializeBinaryToWriter
    );
  }
  f = message.getCurrentTime();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ResourceMeta resource_metas = 1;
 * @return {!Array<!proto.nestlabs.gateway.v2.ResourceMeta>}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.getResourceMetasList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.ResourceMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.ResourceMeta, 1));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.ResourceMeta>} value */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.setResourceMetasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.ResourceMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.ResourceMeta}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.addResourceMetas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nestlabs.gateway.v2.ResourceMeta, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.clearResourceMetasList = function() {
  this.setResourceMetasList([]);
};


/**
 * optional bool initial_resource_metas_continue = 2;
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.getInitialResourceMetasContinue = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.setInitialResourceMetasContinue = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * repeated TraitState trait_states = 3;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitState>}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.getTraitStatesList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitState>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitState, 3));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitState>} value */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.setTraitStatesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitState=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitState}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.addTraitStates = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.nestlabs.gateway.v2.TraitState, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.clearTraitStatesList = function() {
  this.setTraitStatesList([]);
};


/**
 * repeated TraitOperationList trait_operation_lists = 4;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitOperationList>}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.getTraitOperationListsList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitOperationList>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitOperationList, 4));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitOperationList>} value */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.setTraitOperationListsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitOperationList=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitOperationList}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.addTraitOperationLists = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.nestlabs.gateway.v2.TraitOperationList, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.clearTraitOperationListsList = function() {
  this.setTraitOperationListsList([]);
};


/**
 * optional google.protobuf.Timestamp current_time = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.getCurrentTime = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.setCurrentTime = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.clearCurrentTime = function() {
  this.setCurrentTime(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.ObserveResponse.prototype.hasCurrentTime = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nestlabs.gateway.v2.TraitOperationList.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitOperationList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitOperationList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitOperationList.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitId: (f = msg.getTraitId()) && proto.nestlabs.gateway.v2.TraitId.toObject(includeInstance, f),
    traitOperationsList: jspb.Message.toObjectList(msg.getTraitOperationsList(),
    proto.nestlabs.gateway.v2.TraitOperation.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitOperationList}
 */
proto.nestlabs.gateway.v2.TraitOperationList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitOperationList;
  return proto.nestlabs.gateway.v2.TraitOperationList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitOperationList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitOperationList}
 */
proto.nestlabs.gateway.v2.TraitOperationList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nestlabs.gateway.v2.TraitId;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitId.deserializeBinaryFromReader);
      msg.setTraitId(value);
      break;
    case 2:
      var value = new proto.nestlabs.gateway.v2.TraitOperation;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitOperation.deserializeBinaryFromReader);
      msg.addTraitOperations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitOperationList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitOperationList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitOperationList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nestlabs.gateway.v2.TraitId.serializeBinaryToWriter
    );
  }
  f = message.getTraitOperationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.nestlabs.gateway.v2.TraitOperation.serializeBinaryToWriter
    );
  }
};


/**
 * optional TraitId trait_id = 1;
 * @return {?proto.nestlabs.gateway.v2.TraitId}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.getTraitId = function() {
  return /** @type{?proto.nestlabs.gateway.v2.TraitId} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.TraitId, 1));
};


/** @param {?proto.nestlabs.gateway.v2.TraitId|undefined} value */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.setTraitId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.clearTraitId = function() {
  this.setTraitId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.hasTraitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated TraitOperation trait_operations = 2;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitOperation>}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.getTraitOperationsList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitOperation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitOperation, 2));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitOperation>} value */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.setTraitOperationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitOperation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitOperation}
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.addTraitOperations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.nestlabs.gateway.v2.TraitOperation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.TraitOperationList.prototype.clearTraitOperationsList = function() {
  this.setTraitOperationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitOperation.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitOperation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitOperation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitOperation.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitOperation}
 */
proto.nestlabs.gateway.v2.TraitOperation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitOperation;
  return proto.nestlabs.gateway.v2.TraitOperation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitOperation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitOperation}
 */
proto.nestlabs.gateway.v2.TraitOperation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitOperation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitOperation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitOperation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitOperation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nestlabs.gateway.v2.ResourceMeta.repeatedFields_ = [4,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.ResourceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.ResourceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ResourceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    traitMetasList: jspb.Message.toObjectList(msg.getTraitMetasList(),
    proto.nestlabs.gateway.v2.TraitMeta.toObject, includeInstance),
    schemaVersion: jspb.Message.getFieldWithDefault(msg, 6, 0),
    ifaceMetasList: jspb.Message.toObjectList(msg.getIfaceMetasList(),
    proto.nestlabs.gateway.v2.IfaceMeta.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.ResourceMeta}
 */
proto.nestlabs.gateway.v2.ResourceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.ResourceMeta;
  return proto.nestlabs.gateway.v2.ResourceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.ResourceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.ResourceMeta}
 */
proto.nestlabs.gateway.v2.ResourceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 4:
      var value = new proto.nestlabs.gateway.v2.TraitMeta;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitMeta.deserializeBinaryFromReader);
      msg.addTraitMetas(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSchemaVersion(value);
      break;
    case 7:
      var value = new proto.nestlabs.gateway.v2.IfaceMeta;
      reader.readMessage(value,proto.nestlabs.gateway.v2.IfaceMeta.deserializeBinaryFromReader);
      msg.addIfaceMetas(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.ResourceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.ResourceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.ResourceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTraitMetasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.nestlabs.gateway.v2.TraitMeta.serializeBinaryToWriter
    );
  }
  f = message.getSchemaVersion();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getIfaceMetasList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.nestlabs.gateway.v2.IfaceMeta.serializeBinaryToWriter
    );
  }
};


/**
 * optional string resource_id = 1;
 * @return {string}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.getResourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.setResourceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated TraitMeta trait_metas = 4;
 * @return {!Array<!proto.nestlabs.gateway.v2.TraitMeta>}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.getTraitMetasList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.TraitMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.TraitMeta, 4));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.TraitMeta>} value */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.setTraitMetasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.TraitMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.TraitMeta}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.addTraitMetas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.nestlabs.gateway.v2.TraitMeta, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.clearTraitMetasList = function() {
  this.setTraitMetasList([]);
};


/**
 * optional uint32 schema_version = 6;
 * @return {number}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.getSchemaVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.setSchemaVersion = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated IfaceMeta iface_metas = 7;
 * @return {!Array<!proto.nestlabs.gateway.v2.IfaceMeta>}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.getIfaceMetasList = function() {
  return /** @type{!Array<!proto.nestlabs.gateway.v2.IfaceMeta>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nestlabs.gateway.v2.IfaceMeta, 7));
};


/** @param {!Array<!proto.nestlabs.gateway.v2.IfaceMeta>} value */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.setIfaceMetasList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.nestlabs.gateway.v2.IfaceMeta=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nestlabs.gateway.v2.IfaceMeta}
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.addIfaceMetas = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.nestlabs.gateway.v2.IfaceMeta, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nestlabs.gateway.v2.ResourceMeta.prototype.clearIfaceMetasList = function() {
  this.setIfaceMetasList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitState.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitId: (f = msg.getTraitId()) && proto.nestlabs.gateway.v2.TraitId.toObject(includeInstance, f),
    patch: (f = msg.getPatch()) && proto.nestlabs.gateway.v2.Patch.toObject(includeInstance, f),
    monotonicVersion: jspb.Message.getFieldWithDefault(msg, 4, 0),
    publisherVersion: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitState}
 */
proto.nestlabs.gateway.v2.TraitState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitState;
  return proto.nestlabs.gateway.v2.TraitState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitState}
 */
proto.nestlabs.gateway.v2.TraitState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nestlabs.gateway.v2.TraitId;
      reader.readMessage(value,proto.nestlabs.gateway.v2.TraitId.deserializeBinaryFromReader);
      msg.setTraitId(value);
      break;
    case 3:
      var value = new proto.nestlabs.gateway.v2.Patch;
      reader.readMessage(value,proto.nestlabs.gateway.v2.Patch.deserializeBinaryFromReader);
      msg.setPatch(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setMonotonicVersion(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPublisherVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nestlabs.gateway.v2.TraitId.serializeBinaryToWriter
    );
  }
  f = message.getPatch();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nestlabs.gateway.v2.Patch.serializeBinaryToWriter
    );
  }
  f = message.getMonotonicVersion();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getPublisherVersion();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional TraitId trait_id = 1;
 * @return {?proto.nestlabs.gateway.v2.TraitId}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.getTraitId = function() {
  return /** @type{?proto.nestlabs.gateway.v2.TraitId} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.TraitId, 1));
};


/** @param {?proto.nestlabs.gateway.v2.TraitId|undefined} value */
proto.nestlabs.gateway.v2.TraitState.prototype.setTraitId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitState.prototype.clearTraitId = function() {
  this.setTraitId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.hasTraitId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Patch patch = 3;
 * @return {?proto.nestlabs.gateway.v2.Patch}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.getPatch = function() {
  return /** @type{?proto.nestlabs.gateway.v2.Patch} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.Patch, 3));
};


/** @param {?proto.nestlabs.gateway.v2.Patch|undefined} value */
proto.nestlabs.gateway.v2.TraitState.prototype.setPatch = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitState.prototype.clearPatch = function() {
  this.setPatch(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.hasPatch = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional uint64 monotonic_version = 4;
 * @return {number}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.getMonotonicVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.TraitState.prototype.setMonotonicVersion = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 publisher_version = 5;
 * @return {number}
 */
proto.nestlabs.gateway.v2.TraitState.prototype.getPublisherVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.TraitState.prototype.setPublisherVersion = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    traitLabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    schemaVersion: (f = msg.getSchemaVersion()) && proto.nestlabs.gateway.v2.SchemaVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitMeta}
 */
proto.nestlabs.gateway.v2.TraitMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitMeta;
  return proto.nestlabs.gateway.v2.TraitMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitMeta}
 */
proto.nestlabs.gateway.v2.TraitMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraitLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.nestlabs.gateway.v2.SchemaVersion;
      reader.readMessage(value,proto.nestlabs.gateway.v2.SchemaVersion.deserializeBinaryFromReader);
      msg.setSchemaVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTraitLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSchemaVersion();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nestlabs.gateway.v2.SchemaVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string trait_label = 1;
 * @return {string}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.getTraitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.TraitMeta.prototype.setTraitLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.TraitMeta.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional SchemaVersion schema_version = 3;
 * @return {?proto.nestlabs.gateway.v2.SchemaVersion}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.getSchemaVersion = function() {
  return /** @type{?proto.nestlabs.gateway.v2.SchemaVersion} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.SchemaVersion, 3));
};


/** @param {?proto.nestlabs.gateway.v2.SchemaVersion|undefined} value */
proto.nestlabs.gateway.v2.TraitMeta.prototype.setSchemaVersion = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.clearSchemaVersion = function() {
  this.setSchemaVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.TraitMeta.prototype.hasSchemaVersion = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.TraitId.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.TraitId.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.TraitId} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitId.toObject = function(includeInstance, msg) {
  var f, obj = {
    resourceId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    traitLabel: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.TraitId}
 */
proto.nestlabs.gateway.v2.TraitId.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.TraitId;
  return proto.nestlabs.gateway.v2.TraitId.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.TraitId} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.TraitId}
 */
proto.nestlabs.gateway.v2.TraitId.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setResourceId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTraitLabel(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.TraitId.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.TraitId.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.TraitId} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.TraitId.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResourceId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTraitLabel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string resource_id = 1;
 * @return {string}
 */
proto.nestlabs.gateway.v2.TraitId.prototype.getResourceId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.TraitId.prototype.setResourceId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string trait_label = 2;
 * @return {string}
 */
proto.nestlabs.gateway.v2.TraitId.prototype.getTraitLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.TraitId.prototype.setTraitLabel = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.IfaceMeta.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.IfaceMeta} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.IfaceMeta.toObject = function(includeInstance, msg) {
  var f, obj = {
    ifaceLabel: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, ""),
    traitLabelMappingMap: (f = msg.getTraitLabelMappingMap()) ? f.toObject(includeInstance, undefined) : [],
    schemaVersion: (f = msg.getSchemaVersion()) && proto.nestlabs.gateway.v2.SchemaVersion.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.IfaceMeta}
 */
proto.nestlabs.gateway.v2.IfaceMeta.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.IfaceMeta;
  return proto.nestlabs.gateway.v2.IfaceMeta.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.IfaceMeta} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.IfaceMeta}
 */
proto.nestlabs.gateway.v2.IfaceMeta.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIfaceLabel(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setType(value);
      break;
    case 3:
      var value = msg.getTraitLabelMappingMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readString, null, "");
         });
      break;
    case 4:
      var value = new proto.nestlabs.gateway.v2.SchemaVersion;
      reader.readMessage(value,proto.nestlabs.gateway.v2.SchemaVersion.deserializeBinaryFromReader);
      msg.setSchemaVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.IfaceMeta.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.IfaceMeta} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.IfaceMeta.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIfaceLabel();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTraitLabelMappingMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(3, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeString);
  }
  f = message.getSchemaVersion();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nestlabs.gateway.v2.SchemaVersion.serializeBinaryToWriter
    );
  }
};


/**
 * optional string iface_label = 1;
 * @return {string}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.getIfaceLabel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.setIfaceLabel = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string type = 2;
 * @return {string}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.getType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.setType = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * map<string, string> trait_label_mapping = 3;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,string>}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.getTraitLabelMappingMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,string>} */ (
      jspb.Message.getMapField(this, 3, opt_noLazyCreate,
      null));
};


/**
 * Clears values from the map. The map will be non-null.
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.clearTraitLabelMappingMap = function() {
  this.getTraitLabelMappingMap().clear();
};


/**
 * optional SchemaVersion schema_version = 4;
 * @return {?proto.nestlabs.gateway.v2.SchemaVersion}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.getSchemaVersion = function() {
  return /** @type{?proto.nestlabs.gateway.v2.SchemaVersion} */ (
    jspb.Message.getWrapperField(this, proto.nestlabs.gateway.v2.SchemaVersion, 4));
};


/** @param {?proto.nestlabs.gateway.v2.SchemaVersion|undefined} value */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.setSchemaVersion = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.clearSchemaVersion = function() {
  this.setSchemaVersion(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.IfaceMeta.prototype.hasSchemaVersion = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.Patch.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.Patch.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.Patch} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.Patch.toObject = function(includeInstance, msg) {
  var f, obj = {
    values: (f = msg.getValues()) && google_protobuf_any_pb.Any.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.Patch}
 */
proto.nestlabs.gateway.v2.Patch.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.Patch;
  return proto.nestlabs.gateway.v2.Patch.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.Patch} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.Patch}
 */
proto.nestlabs.gateway.v2.Patch.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_any_pb.Any;
      reader.readMessage(value,google_protobuf_any_pb.Any.deserializeBinaryFromReader);
      msg.setValues(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.Patch.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.Patch.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.Patch} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.Patch.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValues();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_any_pb.Any.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Any values = 1;
 * @return {?proto.google.protobuf.Any}
 */
proto.nestlabs.gateway.v2.Patch.prototype.getValues = function() {
  return /** @type{?proto.google.protobuf.Any} */ (
    jspb.Message.getWrapperField(this, google_protobuf_any_pb.Any, 1));
};


/** @param {?proto.google.protobuf.Any|undefined} value */
proto.nestlabs.gateway.v2.Patch.prototype.setValues = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nestlabs.gateway.v2.Patch.prototype.clearValues = function() {
  this.setValues(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nestlabs.gateway.v2.Patch.prototype.hasValues = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.toObject = function(opt_includeInstance) {
  return proto.nestlabs.gateway.v2.SchemaVersion.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nestlabs.gateway.v2.SchemaVersion} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.SchemaVersion.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentVersion: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minCompatVersion: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nestlabs.gateway.v2.SchemaVersion}
 */
proto.nestlabs.gateway.v2.SchemaVersion.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nestlabs.gateway.v2.SchemaVersion;
  return proto.nestlabs.gateway.v2.SchemaVersion.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nestlabs.gateway.v2.SchemaVersion} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nestlabs.gateway.v2.SchemaVersion}
 */
proto.nestlabs.gateway.v2.SchemaVersion.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCurrentVersion(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinCompatVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nestlabs.gateway.v2.SchemaVersion.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nestlabs.gateway.v2.SchemaVersion} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nestlabs.gateway.v2.SchemaVersion.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinCompatVersion();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional uint32 current_version = 1;
 * @return {number}
 */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.getCurrentVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.setCurrentVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 min_compat_version = 2;
 * @return {number}
 */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.getMinCompatVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nestlabs.gateway.v2.SchemaVersion.prototype.setMinCompatVersion = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.nestlabs.gateway.v2);

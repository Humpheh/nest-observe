/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var weave_common_pb = require('./weave.common_pb.js');
goog.object.extend(proto, weave_common_pb);
var google_protobuf_wrappers_pb = require('google-protobuf/google/protobuf/wrappers_pb.js');
goog.object.extend(proto, google_protobuf_wrappers_pb);
goog.exportSymbol('proto.nest.trait.hvac.AssociatedHeatlinksTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink', null, global);
goog.exportSymbol('proto.nest.trait.hvac.DisplaySettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay', null, global);
goog.exportSymbol('proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeStateTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeStateTrait.EcoMode', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason', null, global);
goog.exportSymbol('proto.nest.trait.hvac.EcoModeTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacControl', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacControl.Temperature', null, global);
goog.exportSymbol('proto.nest.trait.hvac.HvacControl.TemperatureThreshold', null, global);
goog.exportSymbol('proto.nest.trait.hvac.LeafTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.SetPointScheduleSettingsTrait', null, global);
goog.exportSymbol('proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType', null, global);
goog.exportSymbol('proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint', null, global);
goog.exportSymbol('proto.nest.trait.hvac.TargetTemperatureSettingsTrait', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeStateTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeStateTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeStateTrait.displayName = 'proto.nest.trait.hvac.EcoModeStateTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.nest.trait.hvac.AssociatedHeatlinksTrait.repeatedFields_, null);
};
goog.inherits(proto.nest.trait.hvac.AssociatedHeatlinksTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.AssociatedHeatlinksTrait.displayName = 'proto.nest.trait.hvac.AssociatedHeatlinksTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.displayName = 'proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacControl = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacControl, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacControl.displayName = 'proto.nest.trait.hvac.HvacControl';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacControl.Temperature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacControl.Temperature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacControl.Temperature.displayName = 'proto.nest.trait.hvac.HvacControl.Temperature';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.HvacControl.TemperatureThreshold, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.HvacControl.TemperatureThreshold.displayName = 'proto.nest.trait.hvac.HvacControl.TemperatureThreshold';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeTrait.displayName = 'proto.nest.trait.hvac.EcoModeTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.EcoModeSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.EcoModeSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.EcoModeSettingsTrait.displayName = 'proto.nest.trait.hvac.EcoModeSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.DisplaySettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.DisplaySettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.DisplaySettingsTrait.displayName = 'proto.nest.trait.hvac.DisplaySettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.LeafTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.LeafTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.LeafTrait.displayName = 'proto.nest.trait.hvac.LeafTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.SetPointScheduleSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.SetPointScheduleSettingsTrait.displayName = 'proto.nest.trait.hvac.SetPointScheduleSettingsTrait';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.displayName = 'proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.nest.trait.hvac.TargetTemperatureSettingsTrait, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.displayName = 'proto.nest.trait.hvac.TargetTemperatureSettingsTrait';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeStateTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeStateTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    ecoMode: jspb.Message.getFieldWithDefault(msg, 1, 0),
    ecoModeChangeReason: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait}
 */
proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeStateTrait;
  return proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait}
 */
proto.nest.trait.hvac.EcoModeStateTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.EcoModeStateTrait.EcoMode} */ (reader.readEnum());
      msg.setEcoMode(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason} */ (reader.readEnum());
      msg.setEcoModeChangeReason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeStateTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeStateTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeStateTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEcoMode();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getEcoModeChangeReason();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.EcoModeStateTrait.EcoMode = {
  ECO_MODE_UNSPECIFIED: 0,
  ECO_MODE_INACTIVE: 1,
  ECO_MODE_MANUAL_ECO: 2,
  ECO_MODE_AUTO_ECO: 3
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason = {
  ECO_MODE_CHANGE_REASON_UNSPECIFIED: 0,
  ECO_MODE_CHANGE_REASON_MANUAL: 1,
  ECO_MODE_CHANGE_REASON_STRUCTURE_MODE: 2,
  ECO_MODE_CHANGE_REASON_OCCUPANCY: 3,
  ECO_MODE_CHANGE_REASON_TEMPERATURE: 4,
  ECO_MODE_CHANGE_REASON_FEATURE_ENABLE: 5
};

/**
 * optional EcoMode eco_mode = 1;
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait.EcoMode}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.getEcoMode = function() {
  return /** @type {!proto.nest.trait.hvac.EcoModeStateTrait.EcoMode} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nest.trait.hvac.EcoModeStateTrait.EcoMode} value */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.setEcoMode = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional EcoModeChangeReason eco_mode_change_reason = 2;
 * @return {!proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason}
 */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.getEcoModeChangeReason = function() {
  return /** @type {!proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nest.trait.hvac.EcoModeStateTrait.EcoModeChangeReason} value */
proto.nest.trait.hvac.EcoModeStateTrait.prototype.setEcoModeChangeReason = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.AssociatedHeatlinksTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    heatLinksList: jspb.Message.toObjectList(msg.getHeatLinksList(),
    proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.AssociatedHeatlinksTrait}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.AssociatedHeatlinksTrait;
  return proto.nest.trait.hvac.AssociatedHeatlinksTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.AssociatedHeatlinksTrait}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink;
      reader.readMessage(value,proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.deserializeBinaryFromReader);
      msg.addHeatLinks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.AssociatedHeatlinksTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHeatLinksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.toObject = function(includeInstance, msg) {
  var f, obj = {
    deviceId: (f = msg.getDeviceId()) && weave_common_pb.ResourceId.toObject(includeInstance, f),
    vendorId: jspb.Message.getFieldWithDefault(msg, 2, 0),
    productId: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink;
  return proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new weave_common_pb.ResourceId;
      reader.readMessage(value,weave_common_pb.ResourceId.deserializeBinaryFromReader);
      msg.setDeviceId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVendorId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setProductId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeviceId();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      weave_common_pb.ResourceId.serializeBinaryToWriter
    );
  }
  f = message.getVendorId();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getProductId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional weave.common.ResourceId device_id = 1;
 * @return {?proto.weave.common.ResourceId}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.getDeviceId = function() {
  return /** @type{?proto.weave.common.ResourceId} */ (
    jspb.Message.getWrapperField(this, weave_common_pb.ResourceId, 1));
};


/** @param {?proto.weave.common.ResourceId|undefined} value */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.setDeviceId = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.clearDeviceId = function() {
  this.setDeviceId(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.hasDeviceId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 vendor_id = 2;
 * @return {number}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.getVendorId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.setVendorId = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 product_id = 3;
 * @return {number}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.getProductId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink.prototype.setProductId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated AssociatedHeatlink heat_links = 1;
 * @return {!Array<!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink>}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.getHeatLinksList = function() {
  return /** @type{!Array<!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink, 1));
};


/** @param {!Array<!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink>} value */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.setHeatLinksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink=} opt_value
 * @param {number=} opt_index
 * @return {!proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink}
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.addHeatLinks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.nest.trait.hvac.AssociatedHeatlinksTrait.AssociatedHeatlink, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.nest.trait.hvac.AssociatedHeatlinksTrait.prototype.clearHeatLinksList = function() {
  this.setHeatLinksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacControl.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacControl.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacControl} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacControl}
 */
proto.nest.trait.hvac.HvacControl.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacControl;
  return proto.nest.trait.hvac.HvacControl.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacControl} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacControl}
 */
proto.nest.trait.hvac.HvacControl.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacControl.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacControl.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacControl} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacControl.Temperature.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacControl.Temperature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacControl.Temperature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.Temperature.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacControl.Temperature;
  return proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacControl.Temperature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacControl.Temperature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacControl.Temperature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float value = 1;
 * @return {number}
 */
proto.nest.trait.hvac.HvacControl.Temperature.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.nest.trait.hvac.HvacControl.Temperature.prototype.setValue = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.HvacControl.TemperatureThreshold.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.HvacControl.TemperatureThreshold} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.toObject = function(includeInstance, msg) {
  var f, obj = {
    value: (f = msg.getValue()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    enabled: jspb.Message.getBooleanFieldWithDefault(msg, 2, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.HvacControl.TemperatureThreshold}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.HvacControl.TemperatureThreshold;
  return proto.nest.trait.hvac.HvacControl.TemperatureThreshold.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.HvacControl.TemperatureThreshold} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.HvacControl.TemperatureThreshold}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setValue(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.HvacControl.TemperatureThreshold.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.HvacControl.TemperatureThreshold} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValue();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getEnabled();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
};


/**
 * optional Temperature value = 1;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.getValue = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 1));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.setValue = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.clearValue = function() {
  this.setValue(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.hasValue = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional bool enabled = 2;
 * @return {boolean}
 */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.getEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.nest.trait.hvac.HvacControl.TemperatureThreshold.prototype.setEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    currentEcoTemperatureHeat: (f = msg.getCurrentEcoTemperatureHeat()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    currentEcoTemperatureCool: (f = msg.getCurrentEcoTemperatureCool()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeTrait}
 */
proto.nest.trait.hvac.EcoModeTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeTrait;
  return proto.nest.trait.hvac.EcoModeTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeTrait}
 */
proto.nest.trait.hvac.EcoModeTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setCurrentEcoTemperatureHeat(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setCurrentEcoTemperatureCool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCurrentEcoTemperatureHeat();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getCurrentEcoTemperatureCool();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional HvacControl.Temperature current_eco_temperature_heat = 1;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.getCurrentEcoTemperatureHeat = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 1));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.EcoModeTrait.prototype.setCurrentEcoTemperatureHeat = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.clearCurrentEcoTemperatureHeat = function() {
  this.setCurrentEcoTemperatureHeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.hasCurrentEcoTemperatureHeat = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional HvacControl.Temperature current_eco_temperature_cool = 2;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.getCurrentEcoTemperatureCool = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 2));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.EcoModeTrait.prototype.setCurrentEcoTemperatureCool = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.clearCurrentEcoTemperatureCool = function() {
  this.setCurrentEcoTemperatureCool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeTrait.prototype.hasCurrentEcoTemperatureCool = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.EcoModeSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    structureModeFollowEnabled: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ecoTemperatureHeat: (f = msg.getEcoTemperatureHeat()) && proto.nest.trait.hvac.HvacControl.TemperatureThreshold.toObject(includeInstance, f),
    ecoTemperatureCool: (f = msg.getEcoTemperatureCool()) && proto.nest.trait.hvac.HvacControl.TemperatureThreshold.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.EcoModeSettingsTrait;
  return proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.EcoModeSettingsTrait}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setStructureModeFollowEnabled(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.HvacControl.TemperatureThreshold;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.TemperatureThreshold.deserializeBinaryFromReader);
      msg.setEcoTemperatureHeat(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.HvacControl.TemperatureThreshold;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.TemperatureThreshold.deserializeBinaryFromReader);
      msg.setEcoTemperatureCool(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.EcoModeSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.EcoModeSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStructureModeFollowEnabled();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEcoTemperatureHeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.HvacControl.TemperatureThreshold.serializeBinaryToWriter
    );
  }
  f = message.getEcoTemperatureCool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.HvacControl.TemperatureThreshold.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool structure_mode_follow_enabled = 1;
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getStructureModeFollowEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setStructureModeFollowEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional HvacControl.TemperatureThreshold eco_temperature_heat = 2;
 * @return {?proto.nest.trait.hvac.HvacControl.TemperatureThreshold}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getEcoTemperatureHeat = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.TemperatureThreshold} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.TemperatureThreshold, 2));
};


/** @param {?proto.nest.trait.hvac.HvacControl.TemperatureThreshold|undefined} value */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setEcoTemperatureHeat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.clearEcoTemperatureHeat = function() {
  this.setEcoTemperatureHeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.hasEcoTemperatureHeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HvacControl.TemperatureThreshold eco_temperature_cool = 3;
 * @return {?proto.nest.trait.hvac.HvacControl.TemperatureThreshold}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.getEcoTemperatureCool = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.TemperatureThreshold} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.TemperatureThreshold, 3));
};


/** @param {?proto.nest.trait.hvac.HvacControl.TemperatureThreshold|undefined} value */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.setEcoTemperatureCool = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.clearEcoTemperatureCool = function() {
  this.setEcoTemperatureCool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.EcoModeSettingsTrait.prototype.hasEcoTemperatureCool = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.DisplaySettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.DisplaySettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    farsightDisplay: jspb.Message.getFieldWithDefault(msg, 1, 0),
    temperatureScale: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.DisplaySettingsTrait;
  return proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay} */ (reader.readEnum());
      msg.setFarsightDisplay(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale} */ (reader.readEnum());
      msg.setTemperatureScale(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.DisplaySettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.DisplaySettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.DisplaySettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFarsightDisplay();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getTemperatureScale();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay = {
  FARSIGHT_DISPLAY_UNSPECIFIED: 0,
  FARSIGHT_DISPLAY_TARGET_TEMP: 1,
  FARSIGHT_DISPLAY_CURRENT_TEMP: 2,
  FARSIGHT_DISPLAY_ANALOG_CLOCK: 3,
  FARSIGHT_DISPLAY_DIGITAL_CLOCK: 4,
  FARSIGHT_DISPLAY_WEATHER: 5,
  FARSIGHT_DISPLAY_NONE: 6
};

/**
 * @enum {number}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale = {
  TEMPERATURE_SCALE_UNSPECIFIED: 0,
  TEMPERATURE_SCALE_C: 1,
  TEMPERATURE_SCALE_F: 2
};

/**
 * optional FarsightDisplay farsight_display = 1;
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.getFarsightDisplay = function() {
  return /** @type {!proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nest.trait.hvac.DisplaySettingsTrait.FarsightDisplay} value */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.setFarsightDisplay = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional TemperatureScale temperature_scale = 2;
 * @return {!proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale}
 */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.getTemperatureScale = function() {
  return /** @type {!proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nest.trait.hvac.DisplaySettingsTrait.TemperatureScale} value */
proto.nest.trait.hvac.DisplaySettingsTrait.prototype.setTemperatureScale = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.LeafTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.LeafTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.LeafTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.LeafTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    active: jspb.Message.getBooleanFieldWithDefault(msg, 1, false),
    ecoThresholdHeat: (f = msg.getEcoThresholdHeat()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    ecoThresholdCool: (f = msg.getEcoThresholdCool()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    setpointThresholdHeat: (f = msg.getSetpointThresholdHeat()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    setpointThresholdCool: (f = msg.getSetpointThresholdCool()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    scheduleDelta: (f = msg.getScheduleDelta()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.LeafTrait}
 */
proto.nest.trait.hvac.LeafTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.LeafTrait;
  return proto.nest.trait.hvac.LeafTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.LeafTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.LeafTrait}
 */
proto.nest.trait.hvac.LeafTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 2:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setEcoThresholdHeat(value);
      break;
    case 3:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setEcoThresholdCool(value);
      break;
    case 4:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setSetpointThresholdHeat(value);
      break;
    case 5:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setSetpointThresholdCool(value);
      break;
    case 6:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setScheduleDelta(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.LeafTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.LeafTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.LeafTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.LeafTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActive();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getEcoThresholdHeat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getEcoThresholdCool();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getSetpointThresholdHeat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getSetpointThresholdCool();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getScheduleDelta();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional bool active = 1;
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.nest.trait.hvac.LeafTrait.prototype.setActive = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional HvacControl.Temperature eco_threshold_heat = 2;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getEcoThresholdHeat = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 2));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.LeafTrait.prototype.setEcoThresholdHeat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.LeafTrait.prototype.clearEcoThresholdHeat = function() {
  this.setEcoThresholdHeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.hasEcoThresholdHeat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional HvacControl.Temperature eco_threshold_cool = 3;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getEcoThresholdCool = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 3));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.LeafTrait.prototype.setEcoThresholdCool = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.LeafTrait.prototype.clearEcoThresholdCool = function() {
  this.setEcoThresholdCool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.hasEcoThresholdCool = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HvacControl.Temperature setpoint_threshold_heat = 4;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getSetpointThresholdHeat = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 4));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.LeafTrait.prototype.setSetpointThresholdHeat = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.LeafTrait.prototype.clearSetpointThresholdHeat = function() {
  this.setSetpointThresholdHeat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.hasSetpointThresholdHeat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HvacControl.Temperature setpoint_threshold_cool = 5;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getSetpointThresholdCool = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 5));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.LeafTrait.prototype.setSetpointThresholdCool = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.LeafTrait.prototype.clearSetpointThresholdCool = function() {
  this.setSetpointThresholdCool(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.hasSetpointThresholdCool = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional HvacControl.Temperature schedule_delta = 6;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.LeafTrait.prototype.getScheduleDelta = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 6));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.LeafTrait.prototype.setScheduleDelta = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.LeafTrait.prototype.clearScheduleDelta = function() {
  this.setScheduleDelta(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.LeafTrait.prototype.hasScheduleDelta = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.SetPointScheduleSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.SetPointScheduleSettingsTrait;
  return proto.nest.trait.hvac.SetPointScheduleSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} */ (reader.readEnum());
      msg.setType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.SetPointScheduleSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType = {
  SET_POINT_SCHEDULE_TYPE_UNSPECIFIED: 0,
  SET_POINT_SCHEDULE_TYPE_HEAT: 1,
  SET_POINT_SCHEDULE_TYPE_COOL: 2,
  SET_POINT_SCHEDULE_TYPE_RANGE: 3
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.toObject = function(includeInstance, msg) {
  var f, obj = {
    setpointType: jspb.Message.getFieldWithDefault(msg, 1, 0),
    dayOfWeek: jspb.Message.getFieldWithDefault(msg, 2, 0),
    secondsInDay: jspb.Message.getFieldWithDefault(msg, 3, 0),
    heatingTarget: (f = msg.getHeatingTarget()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f),
    coolingTarget: (f = msg.getCoolingTarget()) && proto.nest.trait.hvac.HvacControl.Temperature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint;
  return proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} */ (reader.readEnum());
      msg.setSetpointType(value);
      break;
    case 2:
      var value = /** @type {!proto.weave.common.DayOfWeek} */ (reader.readEnum());
      msg.setDayOfWeek(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSecondsInDay(value);
      break;
    case 4:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setHeatingTarget(value);
      break;
    case 5:
      var value = new proto.nest.trait.hvac.HvacControl.Temperature;
      reader.readMessage(value,proto.nest.trait.hvac.HvacControl.Temperature.deserializeBinaryFromReader);
      msg.setCoolingTarget(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetpointType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getDayOfWeek();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getSecondsInDay();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getHeatingTarget();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
  f = message.getCoolingTarget();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.nest.trait.hvac.HvacControl.Temperature.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetPointScheduleType setpoint_type = 1;
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.getSetpointType = function() {
  return /** @type {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.setSetpointType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional weave.common.DayOfWeek day_of_week = 2;
 * @return {!proto.weave.common.DayOfWeek}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.getDayOfWeek = function() {
  return /** @type {!proto.weave.common.DayOfWeek} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.weave.common.DayOfWeek} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.setDayOfWeek = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional uint32 seconds_in_day = 3;
 * @return {number}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.getSecondsInDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.setSecondsInDay = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional HvacControl.Temperature heating_target = 4;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.getHeatingTarget = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 4));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.setHeatingTarget = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.clearHeatingTarget = function() {
  this.setHeatingTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.hasHeatingTarget = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional HvacControl.Temperature cooling_target = 5;
 * @return {?proto.nest.trait.hvac.HvacControl.Temperature}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.getCoolingTarget = function() {
  return /** @type{?proto.nest.trait.hvac.HvacControl.Temperature} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.HvacControl.Temperature, 5));
};


/** @param {?proto.nest.trait.hvac.HvacControl.Temperature|undefined} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.setCoolingTarget = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.clearCoolingTarget = function() {
  this.setCoolingTarget(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.prototype.hasCoolingTarget = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SetPointScheduleType type = 2;
 * @return {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType}
 */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.getType = function() {
  return /** @type {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.nest.trait.hvac.SetPointScheduleSettingsTrait.SetPointScheduleType} value */
proto.nest.trait.hvac.SetPointScheduleSettingsTrait.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.toObject = function(opt_includeInstance) {
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.toObject = function(includeInstance, msg) {
  var f, obj = {
    targetTemperature: (f = msg.getTargetTemperature()) && proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.toObject(includeInstance, f),
    enabled: (f = msg.getEnabled()) && google_protobuf_wrappers_pb.BoolValue.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.nest.trait.hvac.TargetTemperatureSettingsTrait;
  return proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint;
      reader.readMessage(value,proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.deserializeBinaryFromReader);
      msg.setTargetTemperature(value);
      break;
    case 2:
      var value = new google_protobuf_wrappers_pb.BoolValue;
      reader.readMessage(value,google_protobuf_wrappers_pb.BoolValue.deserializeBinaryFromReader);
      msg.setEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.nest.trait.hvac.TargetTemperatureSettingsTrait.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.nest.trait.hvac.TargetTemperatureSettingsTrait} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTargetTemperature();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint.serializeBinaryToWriter
    );
  }
  f = message.getEnabled();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_wrappers_pb.BoolValue.serializeBinaryToWriter
    );
  }
};


/**
 * optional SetPointScheduleSettingsTrait.TemperatureSetPoint target_temperature = 1;
 * @return {?proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.getTargetTemperature = function() {
  return /** @type{?proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint} */ (
    jspb.Message.getWrapperField(this, proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint, 1));
};


/** @param {?proto.nest.trait.hvac.SetPointScheduleSettingsTrait.TemperatureSetPoint|undefined} value */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.setTargetTemperature = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.clearTargetTemperature = function() {
  this.setTargetTemperature(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.hasTargetTemperature = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional google.protobuf.BoolValue enabled = 2;
 * @return {?proto.google.protobuf.BoolValue}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.getEnabled = function() {
  return /** @type{?proto.google.protobuf.BoolValue} */ (
    jspb.Message.getWrapperField(this, google_protobuf_wrappers_pb.BoolValue, 2));
};


/** @param {?proto.google.protobuf.BoolValue|undefined} value */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.setEnabled = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.clearEnabled = function() {
  this.setEnabled(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.nest.trait.hvac.TargetTemperatureSettingsTrait.prototype.hasEnabled = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.nest.trait.hvac);
